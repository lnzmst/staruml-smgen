/**
 * Copyright (c) 2017 Lorenzo Musto (lnz.mst@gmail.com - https://github.com/lnzmst)
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#ifndef {{#smNameSpaces}}{{.}}_{{/smNameSpaces}}{{smName}}_h
#define {{#smNameSpaces}}{{.}}_{{/smNameSpaces}}{{smName}}_h

#include "base/Singleton.h"
{{#smNameSpaces}}

namespace {{.}} {
{{/smNameSpaces}}

class {{smName}};

class iInterface {
public:
  virtual ~iInterface();
{{#smTriggers}}
  virtual void {{.}}() = 0;
{{/smTriggers}}
};

class iPlugIn {
public:
  virtual ~iPlugIn();
{{#smEffects}}
  virtual void {{.}}( {{smName}} *sm ) = 0;
{{/smEffects}}
};

class iState {
public:
  virtual ~iState();
{{#smTriggers}}
  virtual void {{.}}( {{smName}} *sm );
{{/smTriggers}}
};

class {{smName}}: public iInterface {
private:
  iState *_state;
  iPlugIn *_plugin;

public:
  {{smName}}( iState *state, iPlugIn *plugin = 0 );

{{#smTriggers}}
  void {{.}}() override;
{{/smTriggers}}

  void state( iState *s );

{{#smGuards}}
  bool {{.}}();
{{/smGuards}}
{{#smEffects}}
  void {{.}}();
{{/smEffects}}
};

{{#smStates}}
class {{stateName}}: public iState {
private:
  friend Singleton<{{stateName}}>;
  {{stateName}}();
  {{#state_hasPublic}}

public:
  {{/state_hasPublic}}
  {{#stateTransitions}}
  void {{triggerName}}( {{smName}} *sm ) override;
  {{/stateTransitions}}
};

{{/smStates}}
{{#smNameSpaces}}
} // namespace {{.}} {
{{/smNameSpaces}}

#endif // #ifndef {{#smNameSpaces}}{{.}}_{{/smNameSpaces}}{{smName}}_h